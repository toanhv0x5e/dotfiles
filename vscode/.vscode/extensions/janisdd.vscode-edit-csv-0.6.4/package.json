{
	"name": "vscode-edit-csv",
	"displayName": "Edit csv",
	"description": "extension to edit csv files with a table ui",
	"version": "0.6.4",
	"license": "MIT",
	"icon": "images/logo.png",
	"publisher": "janisdd",
	"engines": {
		"vscode": "^1.38.0"
	},
	"categories": [
		"Other"
	],
	"keywords": [
		"CSV"
	],
	"preview": true,
	"repository": {
		"type": "git",
		"url": "https://github.com/janisdd/vscode-edit-csv.git"
	},
	"bugs": {
		"url": "https://github.com/janisdd/vscode-edit-csv/issues"
	},
	"galleryBanner": {
		"color": "#687bff",
		"theme": "light"
	},
	"activationEvents": [
		"onCommand:edit-csv.edit",
		"onCommand:edit-csv.apply",
		"onCommand:edit-csv.applyAndSave"
	],
	"main": "./out/extension.js",
	"contributes": {
		"languages": [
			{
				"id": "csv",
				"extensions": [
					".csv"
				],
				"aliases": [
					"CSV"
				]
			},
			{
				"id": "tsv",
				"extensions": [
					".tsv",
					".tab"
				],
				"aliases": [
					"TSV"
				]
			}
		],
		"commands": [
			{
				"command": "edit-csv.edit",
				"category": "CSV",
				"title": "Edit csv"
			},
			{
				"command": "edit-csv.goto-source",
				"category": "CSV",
				"title": "Go to csv source file"
			},
			{
				"command": "edit-csv.apply",
				"category": "CSV",
				"title": "Apply changes to source file"
			},
			{
				"command": "edit-csv.applyAndSave",
				"category": "CSV",
				"title": "Apply changes to source file and save"
			}
		],
		"menus": {
			"explorer/context": [
				{
					"when": "resourceLangId == csv",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == tsv",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == CSV",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == TSV",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'CSV (semicolon)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (semicolon)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (pipe)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (whitespace)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (tilde)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (caret)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (colon)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (double quote)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (equals)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (dot)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'csv (hyphen)'",
					"command": "edit-csv.edit",
					"group": "navigation"
				}
			],
			"editor/title": [
				{
					"when": "editorLangId == csv && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == tsv && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == CSV && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == TSV && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'CSV (semicolon)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (semicolon)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (pipe)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (whitespace)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (tilde)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (caret)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (colon)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (double quote)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (equals)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (dot)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (hyphen)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				}
			],
			"editor/title/context": [
				{
					"when": "resourceLangId == csv && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == tsv && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == CSV && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == TSV && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "resourceLangId == 'CSV (semicolon)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (semicolon)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (pipe)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (whitespace)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (tilde)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (caret)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (colon)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (double quote)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (equals)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (dot)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				},
				{
					"when": "editorLangId == 'csv (hyphen)' && resourceScheme != csv-edit",
					"command": "edit-csv.edit",
					"group": "navigation"
				}
			]
		},
		"configuration": {
			"title": "Edit csv configuration",
			"type": "object",
			"properties": {
				"csv-edit.highlightCsvComments": {
					"type": "boolean",
					"default": true,
					"description": "true: the cell/row color is changed if the first cell is a comment, (might have negative impact on performance e.g. for large data sets), false: no additional highlighting (comments are still treated as comments)"
				},
				"csv-edit.lastRowEnterBehavior": {
					"type": "string",
					"default": "default",
					"description": "if one edits a cell in the last row and presses enter what the editor should do (default is to jump to the first row in the next column)",
					"enum": [
						"default",
						"createRow"
					],
					"enumDescriptions": [
						"default of handsontable",
						"create a new row"
					]
				},
				"csv-edit.lastColumnTabBehavior": {
					"type": "string",
					"default": "default",
					"description": "if one edits a cell in the last column and presses tab what the editor should do (default is to jump to the first row in the first column)",
					"enum": [
						"default",
						"createColumn"
					],
					"enumDescriptions": [
						"default of handsontable",
						"create a new column"
					]
				},
				"csv-edit.optionsBarAppearance": {
					"type": "string",
					"default": "collapsed",
					"description": "the appearance of the options bar",
					"enum": [
						"expanded",
						"collapsed"
					],
					"enumDescriptions": [
						"options bar will always start expanded",
						"options bar will always start collapsed"
					]
				},
				"csv-edit.readOption_hasHeader": {
					"type": "string",
					"default": "false",
					"description": "whether the first data line is a header line",
					"enum": [
						"true",
						"false"
					],
					"enumDescriptions": [
						"first row is the header row",
						"first row is a normal data row"
					]
				},
				"csv-edit.readOption_delimiter": {
					"type": "string",
					"default": "",
					"description": "the delimiter to use, empty string to auto detect"
				},
				"csv-edit.readOption_comment": {
					"type": "string",
					"default": "#",
					"description": "the string used as comment, empty string to thread every line as data line (no comments)"
				},
				"csv-edit.readOption_quoteChar": {
					"type": "string",
					"default": "\"",
					"description": "the string used to quote fields",
					"maxLength": 1
				},
				"csv-edit.readOption_escapeChar": {
					"type": "string",
					"default": "\"",
					"description": "the string used to escape the quote character within a field",
					"maxLength": 1
				},
				"csv-edit.writeOption_hasHeader": {
					"type": "string",
					"default": "false",
					"description": "whether the first data line is a header line",
					"enum": [
						"true",
						"false"
					],
					"enumDescriptions": [
						"first row is the header row",
						"first row is a normal data row"
					]
				},
				"csv-edit.writeOption_delimiter": {
					"type": "string",
					"default": "",
					"description": "the delimiter to use, empty string to auto detect"
				},
				"csv-edit.writeOption_comment": {
					"type": "string",
					"default": "#",
					"description": "the string used as comment, empty string to exclude comments"
				},
				"csv-edit.writeOption_quoteChar": {
					"type": "string",
					"default": "\"",
					"description": "the string used to quote fields",
					"maxLength": 1
				},
				"csv-edit.writeOption_escapeChar": {
					"type": "string",
					"default": "\"",
					"description": "the string used to escape the quote character within a field",
					"maxLength": 1
				},
				"csv-edit.doubleClickColumnHandleForcedWith": {
					"type": "number",
					"default": "200",
					"description": "normally the columns are auto sized, if we click on the handle when it has auto size then its with is set to this value (in px). Useful if we have a very wide column (wider than the screen and quickly want to shrink it)"
				},
				"csv-edit.openSourceFileAfterApply": {
					"type": "boolean",
					"default": false,
					"description": "true: opens the source file after apply, false: keep the editor displayed"
				},
				"csv-edit.selectTextAfterBeginEditCell": {
					"type": "boolean",
					"default": false,
					"description": "true: select the text inside the cell (note you can also select the cell and start typings to overwrite the cell value), false: cursor starts at the end of the text"
				},
				"csv-edit.quoteAllFields": {
					"type": "boolean",
					"default": false,
					"description": "true: to always quote fields, false: not (only if necessary, and respect retainQuoteInformation)"
				},
				"csv-edit.quoteEmptyOrNullFields": {
					"type": "string",
					"default": "false",
					"description": "whether null, undefined and empty values should be quoted (takes precedence over quoteAllFields)",
					"enum": [
						"true",
						"false"
					],
					"enumDescriptions": [
						"quote null, undefined and empty values",
						"do not quote null, undefined and empty values"
					]
				},
				"csv-edit.initiallyHideComments": {
					"type": "boolean",
					"default": false,
					"description": "true: Initially hides rows with comments found in the table, false: not hide rows with comments"
				},
				"csv-edit.enableWrapping": {
					"type": "boolean",
					"default": true,
					"description": "true: cell content is wrapped and the row height is changed, false: no wrapping (content is hidden)"
				},
				"csv-edit.initialColumnWidth": {
					"type": "integer",
					"default": 0,
					"description": "the initial width for columns, 0 or a negative number will disable this and auto column size is used on initial render"
				},
				"csv-edit.retainQuoteInformation": {
					"type": "boolean",
					"default": true,
					"description": "true: information about quoted fields are retained during parsing (for more details see readme), false: information about quoted field is discarded"
				},
				"csv-edit.newColumnQuoteInformationIsQuoted": {
					"type": "boolean",
					"default": false,
					"description": "true: new columns will get true as quote information (also for added columns via expanding), false: new columns will get false as quote information"
				},
				"csv-edit.disableBorders": {
					"type": "boolean",
					"default": false,
					"description": "true: borders are set to 0 (in css). This helps if you encounter some border color issues, false: normal borders"
				},
				"csv-edit.initiallyFixedRowsTop": {
					"type": "number",
					"default": 0,
					"description": "the first X rows are pinned so they will stay in view even if you scroll"
				},
				"csv-edit.initiallyFixedColumnsLeft": {
					"type": "number",
					"default": 0,
					"description": "the first X columns are pinned so they will stay in view even if you scroll"
				},
				"csv-edit.fontSizeInPx": {
					"type": "number",
					"default": 16,
					"description": "the font size in px, 0 or -x to sync the font size with the editor, +x to overwrite the font size (changing will rerender the table)"
				},
				"csv-edit.showColumnHeaderNamesWithLettersLikeExcel": {
					"type": "boolean",
					"default": false,
					"description": "true: show column names with letters e.g. A, B, ..., Z (like Excel), false: use numbers for column names e.g. 1, 2, ..."
				},
				"csv-edit.shouldWatchCsvSourceFile": {
					"type": "boolean",
					"default": true,
					"description": "true: the source csv file is watched for changes. If changes happen the user is notified (maybe the table is automatically reloaded when the table has no changes). false: not watched the source csv file"
				},
				"csv-edit.sidePanelAppearance": {
					"type": "string",
					"default": "collapsed",
					"description": "the appearance of the side panel",
					"enum": [
						"expanded",
						"collapsed"
					],
					"enumDescriptions": [
						"side panel will always start expanded",
						"side panel will always start collapsed"
					]
				},
				"csv-edit.initialNumbersStyle": {
					"type": "string",
					"default": "en",
					"description": "the initial numbers style for the side panel stats",
					"enum": [
						"en",
						"non-en"
					],
					"enumDescriptions": [
						"decimal separator is '.' e.g. 3.14 Optional thousand separator: ',' e.g. 1,003.14",
						"decimal separator is ',' e.g. 3,14 Optional thousand separator: '.' e.g. 1.003,14"
					]
				},
				"csv-edit.insertRowBehavior": {
					"type": "string",
					"default": "keepRowKeepColumn",
					"description": "which cell should be focused or selected when a new row is inserted (above or below)",
					"enum": [
						"focusFirstCellNewRow",
						"keepRowKeepColumn"
					],
					"enumDescriptions": [
						"focus the first cell in the new row",
						"keep the currently selected cell"
					]
				},
				"csv-edit.insertColBehavior": {
					"type": "string",
					"default": "keepRowKeepColumn",
					"description": "which cell should be focused or selected when a new column is inserted (left or right)",
					"enum": [
						"keepRowFocusNewColumn",
						"keepRowKeepColumn"
					],
					"enumDescriptions": [
						"we stay in the same row but the cell in the new column is selected",
						"keep the currently selected cell"
					]
				},
				"csv-edit.initiallyIsInReadonlyMode": {
					"type": "boolean",
					"default": false,
					"description": "true: table starts in readonly mode, false: normal edit mode"
				}
			}
		}
	},
	"scripts": {
		"preinstall": "npx npm-force-resolutions",
		"vscode:prepublish": "npm audit && npm run compile",
		"compile": "tsc -p ./ && tsc -p ./csvEditorHtml/tsconfig.json",
		"watch": "tsc -watch -p ./",
		"package": "vsce package",
		"test": "npm run compile && node ./node_modules/vscode/bin/test",
		"test2": "echo 'to run the tests compile and then go to the debug tab and start Extension Tests'",
		"lint": "npx tslint -p . && npx tslint -p ./csvEditorHtml/tsconfig.json",
		"promptUp": "node ./promtUploadbuild.js",
		"buildBrowser": "node ./csvEditorHtml/out/browser/build/build.js"
	},
	"dependencies": {
		"chokidar": "3.4.2"
	},
	"devDependencies": {
		"@sweetalert2/theme-dark": "^3.2.0",
		"@types/big.js": "^4.0.5",
		"@types/fs-extra": "^9.0.1",
		"@types/glob": "^7.1.2",
		"@types/jsdom": "11.0.4",
		"@types/mocha": "^2.2.48",
		"@types/mousetrap": "^1.6.3",
		"@types/node": "^8.10.25",
		"@types/papaparse": "4.5.6",
		"@types/readline-sync": "^1.4.3",
		"@types/vscode": "^1.38.0",
		"bulma-toast": "^2.0.3",
		"chardet": "^1.2.1",
		"fs-extra": "^9.0.1",
		"glob": "^7.1.6",
		"iconv-lite": "^0.6.2",
		"jsdom": "16.4.0",
		"mocha": "^9.1.2",
		"readline-sync": "^1.4.10",
		"sweetalert2": "^9.17.2",
		"toaster-js": "^2.2.3",
		"tslint": "^5.8.0",
		"typescript": "^4.0.2",
		"vscode-test": "^1.3.0"
	},
	"__metadata": {
		"id": "72e9b049-d75d-415c-96e1-d6e74f0e3074",
		"publisherId": "58bd5644-7810-46e8-9e77-98e658298b7d",
		"publisherDisplayName": "janisdd",
		"installedTimestamp": 1634394644824
	}
}