"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFile = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const resolve_from_1 = __importDefault(require("resolve-from"));
const os = __importStar(require("os"));
const testNodeModules = /^node_modules\//;
/**
 * Resolve filename to absolute paths.
 * It tries to look for local files as well as node_modules
 * @param filename an absolute path, relative path, `~` path, or a node_module.
 * @param relativeTo absolute path
 */
function resolveFile(filename, relativeTo) {
    filename = filename.replace(/^~/, os.homedir());
    const methodResolveFrom = (filename) => tryResolveFrom(filename, relativeTo);
    const steps = [
        { filename: path.resolve(relativeTo, filename), fn: tryResolveExists },
        { filename: path.resolve(filename), fn: tryResolveExists },
        { filename: filename, fn: methodResolveFrom },
        { filename: filename.replace(testNodeModules, ''), fn: methodResolveFrom },
    ];
    for (const step of steps) {
        const r = step.fn(step.filename);
        if (r.found)
            return r;
    }
    return { filename: path.resolve(relativeTo, filename), found: false };
}
exports.resolveFile = resolveFile;
function tryResolveExists(filename) {
    return { filename, found: fs.existsSync(filename) };
}
function tryResolveFrom(filename, relativeTo) {
    try {
        return { filename: resolve_from_1.default(relativeTo, filename), found: true };
    }
    catch (error) {
        // Failed to resolve a relative module request
        return { filename: filename, found: false };
    }
}
//# sourceMappingURL=resolveFile.js.map